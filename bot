import logging
import sqlite3
import os
from zipfile import ZipFile

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import Updater, CommandHandler, MessageHandler, CallbackQueryHandler, CallbackContext
from telegram.ext import BaseFilter as MessageFilter



def create_tables():
    conn = sqlite3.connect('transactions.db')
    c = conn.cursor()

    c.execute("""
        CREATE TABLE IF NOT EXISTS received (
            id INTEGER PRIMARY KEY,
            ticket_num TEXT
        )
    """)

    c.execute("""
        CREATE TABLE IF NOT EXISTS not_received (
            id INTEGER PRIMARY KEY,
            ticket_num TEXT
        )
    """)

    conn.commit()
    conn.close()

create_tables()


# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# Define global variable
received_payments = {}

# Define states
RECEIVED, NOT_RECEIVED, AWAITING_SCREENSHOT = range(3)

# Define buttons
RECEIVED_BUTTON = {'text': 'Received ✅', 'callback_data': 'received'}
NOT_RECEIVED_BUTTON = {'text': 'Not Received ❌', 'callback_data': 'not_received'}
CHECK_AGAIN_BUTTON = {'text': 'Check again 🤦🏾‍♂️', 'callback_data': 'check_again'}
SCAN_CHAT_BUTTON = {'text': 'Scan Chat 🕵️‍♂️', 'callback_data': 'scan_chat'}
SHOW_TOTAL_BUTTON = {'text': 'Show Total 💰', 'callback_data': 'show_total'}
BOOKS_BUTTON = {'text': 'Books 📚', 'callback_data': 'books'}

# Define environment variable for the token
TELEGRAM_BOT_TOKEN = '6131230287:AAENfl65uwbX2OYxtCEhehFwh8oYrQ3AdRE'

# Define function to start the bot
def start(update: Update, context: telegram.ext.CallbackContext) -> None:
    """Send a message when the command /start is issued."""
    keyboard = [[InlineKeyboardButton(SCAN_CHAT_BUTTON['text'], callback_data=SCAN_CHAT_BUTTON['callback_data']),
                 InlineKeyboardButton(SHOW_TOTAL_BUTTON['text'], callback_data=SHOW_TOTAL_BUTTON['callback_data']),
                 InlineKeyboardButton(BOOKS_BUTTON['text'], callback_data=BOOKS_BUTTON['callback_data'])]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('Hi! How can I help you?', reply_markup=reply_markup)

# Define function to handle messages
def transaction(update: Update, context: CallbackContext) -> None:
    """Log the transaction amount and description."""
    conn = sqlite3.connect('transactions.db')
    c = conn.cursor()
    try:
        # Parse message to extract amount and description
        message = update.message.text.split('\n')
        logger.info(message)  # for debugging purposes only
        sender = message[0]
        amount = message[1].replace('£', '').replace(',', '')
        bank = message[2]
        receiver = message[3]
        reference = message[4]

        c.execute("DROP TABLE IF EXISTS transactions")
        c.execute("""
            CREATE TABLE transactions (
                id INTEGER PRIMARY KEY,
                sender_name TEXT,
                amount REAL,
                bank TEXT,
                receiver_name TEXT,
                reference TEXT
            )
        """)

        # Insert transaction into database
        c.execute("INSERT INTO transactions (sender_name, amount, bank, receiver_name, reference) VALUES (?, ?, ?, ?, ?)", (sender, float(amount), bank, receiver, reference))

        # Send message to user
        keyboard = [[RECEIVED_BUTTON, NOT_RECEIVED_BUTTON]]
        reply_markup = {'inline_keyboard': keyboard}
        update.message.reply_text('Transaction recorded. Did you receive the payment?', reply_markup=reply_markup)
        context.user_data['state'] = RECEIVED

    except Exception as e:
        update.message.reply_text('Error recording transaction.')
        logger.error(f'Error recording transaction: {e}')

    conn.commit()
    conn.close()

# Define function for main menu
def main_menu(update: Update, context: CallbackContext) -> None:
    """Show the main menu with options to scan chat or show total."""
    keyboard = [
        [InlineKeyboardButton("Scan Chat", callback_data='scan_chat')],
        [InlineKeyboardButton("Show Total", callback_data='show_total')],
        [InlineKeyboardButton("Books📚", callback_data='books')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('Please select an option:', reply_markup=reply_markup)


def button(update, context):
    query = update.callback_query
    query.answer(cache_time=5)

    # Get the user's choice
    choice = query.data

    # Check which button was pressed
    if choice == 'received':
        total_received(update, context)
    elif choice == 'sent':
        total_sent(update, context)

    # Get the user ID
    user_id = update.effective_user.id

    # Check if user has previously sent payments
    if user_id in received_payments:
        # Get the list of received payments for this user
        payments = received_payments[user_id]

        # Calculate the total amount received by the user
        total_amount = sum(payment['amount'] for payment in payments)

        # Send a message to the user with the total amount received
        if update.message:
            update.message.reply_text(f"You have received a total of £{total_amount}")
        elif update.edited_message:
            update.edited_message.reply_text(f"You have received a total of £{total_amount}")
        elif update.callback_query:
            update.callback_query.answer(f"You have received a total of £{total_amount}")
        else:
            logger.warning('update object does not contain a message or a callback query')
    else:
        # If the user has not received any payments yet
        if update.message:
            update.message.reply_text("You have not received any payments yet.")
        elif update.edited_message:
            update.edited_message.reply_text("You have not received any payments yet.")
        elif update.callback_query:
            update.callback_query.answer("You have not received any payments yet.")
        else:
            logger.warning('update object does not contain a message or a callback query')



# Define function to show books
def books(update: Update, context: CallbackContext) -> None:
    """Show the available books for download."""
    conn = sqlite3.connect('transactions.db')
    c = conn.cursor()

    # Retrieve transaction data from database
    c.execute("SELECT * FROM transactions")
    transactions = c.fetchall()

    # Separate account payments and group payments
    account_payments = []
    group_payments = {}
    for transaction in transactions:
        if transaction[3] == 'Account':
            account_payments.append(transaction)
        else:
            if transaction[3] not in group_payments:
                group_payments[transaction[3]] = []
            group_payments[transaction[3]].append(transaction)

    # Create Total document for account payments
    total = sum(payment[2] for payment in account_payments)
    account_file = f'Total Account Payments\n\nTotal: £{total:.2f}\n\n'
    for payment in account_payments:
        account_file += f"{payment[1]} paid £{payment[2]:.2f} for {payment[4]} with reference {payment[5]}\n"

    # Create individual documents for group payments
    for group, payments in group_payments.items():
        total = sum(payment[2] for payment in payments)
        group_file = f'{group} Payments\n\nTotal: £{total:.2f}\n\n'
        for payment in payments:
            group_file += f"{payment[1]} paid £{payment[2]:.2f} to {payment[4]} with reference {payment[5]}\n"

        # Save file as a text file
        with open(f'{group}.txt', 'w') as f:
            f.write(group_file)

    # Create zip file with all the text files
    with ZipFile('books.zip', 'w') as zip:
        zip.write('Total Account Payments.txt')
        for group in group_payments:
            zip.write(f'{group}.txt')

    # Send zip file to user
    with open('books.zip', 'rb') as f:
        update.message.reply_document(document=f, filename='books.zip')

    conn.close()

# Define function to handle /help command
def help_command(update: Update, context: telegram.ext.CallbackContext) -> None:
    """Send a message when the command /help is issued."""
    update.message.reply_text('This is a bot to record transactions. To use, send the details of the transaction in the format:\n\n[Sender]\n[Amount]\n[Bank]\n[Receiver]\n[Reference]\n\nThe bot will then prompt you to confirm if you have received the payment or not. Use the buttons provided to confirm or deny.')

def scan_chat(update, context):
    message = update.message
    if message.text.lower() == '/scan':
        # Get chat_id and text of last message
        chat_id = message.chat_id
        last_message = message.reply_to_message
        if last_message:
            text = last_message.text
            # Scan text for sensitive information
            results = scan_text(text)
            # Send results back to user
            if results:
                reply_text = f"Sensitive information found:\n\n{results}"
            else:
                reply_text = "No sensitive information found."
            message.reply_text(reply_text)
        else:
            message.reply_text("Please reply to a message to scan it.")
    else:
        query = update.callback_query
        if query:
            query.answer()


# Define function to handle received messages
def received(update, context):
    conn = sqlite3.connect('transactions.db')
    c = conn.cursor()

    # Get the ticket number from the message
    ticket_num = get_ticket_number(update.message.text)

    # Add the ticket to the received database
    c.execute("INSERT INTO received (ticket_num) VALUES (?)", (ticket_num,))

    conn.commit()
    conn.close()

    # Send a message to the chat confirming that the ticket was received
    update.message.reply_text(f'Ticket {ticket_num} received!')


# Define function to handle not received messages
def not_received(update, context):
    conn = sqlite3.connect('transactions.db')
    c = conn.cursor()

    # Get the ticket number from the message
    ticket_num = get_ticket_number(update.message.text)

    # Add the ticket to the not_received database
    c.execute("INSERT INTO not_received (ticket_num) VALUES (?)", (ticket_num,))

    conn.commit()
    conn.close()

    # Send a message to the chat confirming that the ticket was not received
    update.message.reply_text(f'Ticket {ticket_num} not received.')


    
    # go again


def total_received(update: Update, context: CallbackContext) -> None:
    """Calculate the total amount received by the user."""
    user_id = update.effective_user.id

    # Check if user has previously sent payments
    if user_id in received_payments:
        # Get the list of received payments for this user
        payments = received_payments[user_id]

        # Calculate the total amount received by the user
        total_amount = sum(payment['amount'] for payment in payments)

        # Send a message to the user with the total amount received
        if update.message:
            update.message.reply_text(f"You have received a total of £{total_amount}")
        elif update.edited_message:
            update.edited_message.reply_text(f"You have received a total of £{total_amount}")
        elif update.callback_query:
            update.callback_query.answer(f"You have received a total of £{total_amount}")
        else:
            logger.warning('update object does not contain a message or a callback query')
    else:
        # If the user has not received any payments yet
        if update.message:
            update.message.reply_text("You have not received any payments yet.")
        elif update.edited_message:
            update.edited_message.reply_text("You have not received any payments yet.")
        elif update.callback_query:
            update.callback_query.answer("You have not received any payments yet.")
        else:
            logger.warning('update object does not contain a message or a callback query')


def total_sent(update: Update, context: CallbackContext) -> None:
    """Calculate the total amount sent by the user."""
    user_id = update.effective_user.id

    # Check if user has previously sent payments
    if user_id in sent_payments:
        # Get the list of sent payments for this user
        payments = sent_payments[user_id]

        # Calculate the total amount sent by the user
        total_amount = sum(payment['amount'] for payment in payments)

        # Send a message to the user with the total amount sent
        if update.message:
            update.message.reply_text(f"You have sent a total of £{total_amount}")
        elif update.edited_message:
            update.edited_message.reply_text(f"You have sent a total of £{total_amount}")
        elif update.callback_query:
            update.callback_query.answer(f"You have sent a total of £{total_amount}")
        else:
            logger.warning('update object does not contain a message or a callback query')
    else:
        # If the user has not sent any payments yet
        if update.message:
            update.message.reply_text("You have not sent any payments yet.")
        elif update.edited_message:
            update.edited_message.reply_text("You have not sent any payments yet.")
        elif update.callback_query:
            update.callback_query.answer("You have not sent any payments yet.")
        else:
            logger.warning('update object does not contain a message or a callback query')

def scan_chat(update: Update, context: CallbackContext) -> None:
    """Scan the chat for messages containing transaction information and add them to the database."""
    # Retrieve the chat id
    chat_id = update.message.chat_id

    # Retrieve the chat messages
    messages = context.bot.get_chat_history(chat_id=chat_id, limit=100)

    # Loop through the messages and extract transaction information
    for message in messages:
        # Check if the message contains transaction information
        if 'Sender' in message.text and 'Amount' in message.text and 'Bank' in message.text and 'Receiver' in message.text and 'Reference' in message.text:
            # Parse the message to extract transaction details
            details = message.text.split('\n')
            sender = details[0].replace('Sender: ', '')
            amount = float(details[1].replace('Amount: £', '').replace(',', ''))
            bank = details[2].replace('Bank: ', '')
            receiver = details[3].replace('Receiver: ', '')
            reference = details[4].replace('Reference: ', '')

            # Insert the transaction into the database
            conn = sqlite3.connect('transactions.db')
            c = conn.cursor()
            c.execute("INSERT INTO transactions (sender, amount, bank, receiver, reference) VALUES (?, ?, ?, ?, ?)", (sender, amount, bank, receiver, reference))
            conn.commit()
            conn.close()

    # Send a message to the user indicating that the scan is complete
    update.message.reply_text('Scan complete.')



# Define function to extract the ticket number from a message
def get_ticket_number(message_text):
    # Extract the ticket number from the message text
    # For example, if the message is "Ticket 123", this function would return 123
    ticket_num = message_text.split()[1]
    return ticket_num

# Define class to handle received tickets
class ReceivedDatabase:
    def __init__(self):
        self.tickets = set()

    def add_ticket(self, ticket_num):
        self.tickets.add(ticket_num)

    def is_received(self, ticket_num):
        return ticket_num in self.tickets

# Define class to handle not received tickets
class NotReceivedDatabase:
    def __init__(self):
        self.tickets = set()

    def add_ticket(self, ticket_num):
        self.tickets.add(ticket_num)

    def is_not_received(self, ticket_num):
        return ticket_num in self.tickets






def main() -> None:

    logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO,
    filename='bot.log', filemode='a'
)

    """Start the bot."""
     # Initialize the Updater with the token and the dispatcher
    updater = Updater(TELEGRAM_BOT_TOKEN)

    # Get the dispatcher to register handlers
    dispatcher = updater.dispatcher

    # on different commands - answer in Telegram
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))

    # Add main menu handler
    dispatcher.add_handler(CommandHandler("menu", main_menu))

    # Add message handler for scanning chat
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, scan_chat))

    # Add message handler for transactions
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, transaction))

    # Add callback query handler for buttons
    dispatcher.add_handler(CallbackQueryHandler(button))

    # Add books handler
    dispatcher.add_handler(CommandHandler("books", books))

    # help command
    dispatcher.add_handler(CommandHandler("help", help_command))


    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()


if __name__ == '__main__':
    main()
